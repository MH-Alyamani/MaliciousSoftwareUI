/*
Name: Mohammed Shadi Alyamani
ID:2135971
*/

package malicioussoftware;

import javafx.application.Application;
import javafx.concurrent.Task;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.HashSet;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.layout.HBox;

public class MalwareScannerApp extends Application {

    private File selectedFolder;
    private File signatureFile;
    private boolean includeSubfolders;
    private ProgressBar progressBar;

    @Override
    public void start(Stage primaryStage) {
        // Create the menu bar
        MenuBar menuBar = new MenuBar();
        Menu fileMenu = new Menu("File");
        MenuItem newScan = new MenuItem("New Scan");
        MenuItem quit = new MenuItem("Quit");

        newScan.setOnAction(e -> showScanWindow());
        quit.setOnAction(e -> System.exit(0));

        fileMenu.getItems().addAll(newScan, quit);
        menuBar.getMenus().add(fileMenu);

        // Create the Help menu
        Menu helpMenu = new Menu("Help");
        MenuItem about = new MenuItem("About");
        about.setOnAction(e -> showHelpWindow());
        helpMenu.getItems().add(about);
        menuBar.getMenus().add(helpMenu);  // Add Help menu to the menu bar

        // Create the label for the welcome message
        Label welcomeLabel = new Label("\"Welcome to CPCS 405 Malware Scanner!\"");
        welcomeLabel.setStyle("-fx-font-size: 15px;");

        // Create a VBox to hold the menu and label, with the menu at the top
        VBox root = new VBox();
        root.setSpacing(20); // 20px spacing between elements
        root.setAlignment(Pos.TOP_CENTER); // Menu bar at the top, label centered below

        // Create a second VBox to hold and center the label
        VBox labelBox = new VBox(welcomeLabel);
        labelBox.setAlignment(Pos.CENTER); // Center the label within this VBox
        labelBox.setPadding(new Insets(50, 0, 0, 0)); // Add padding to push the label down (50px from the top)

        // Add the menu bar and label box to the root VBox
        root.getChildren().addAll(menuBar, labelBox);

        // Set the scene and show the stage
        Scene scene = new Scene(root, 400, 300);
        primaryStage.setTitle("Malware Scanner");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void showHelpWindow() {
        // Create a new window (stage) for the Help info
        Stage helpStage = new Stage();
        helpStage.setTitle("About");

        // Create labels for name and ID
        Label nameLabel = new Label("Name: Mohammed Shadi Alyamani");
        Label idLabel = new Label("ID: 2135971");

        // Create a VBox to hold the labels
        VBox vbox = new VBox(10, nameLabel, idLabel);
        vbox.setAlignment(Pos.CENTER);
        vbox.setPadding(new Insets(20));

        // Create a scene and set it to the new stage
        Scene scene = new Scene(vbox, 300, 200);
        helpStage.setScene(scene);

        // Show the Help window
        helpStage.show();
    }

    private void showScanWindow() {
        // Create a new Stage for the scan window
        Stage scanStage = new Stage();

        // Create DirectoryChooser for selecting a folder
        DirectoryChooser directoryChooser = new DirectoryChooser();
        // Create FileChooser for selecting a signature file
        FileChooser fileChooser = new FileChooser();

        // Button for selecting the folder to scan
        Button selectFolderButton = new Button("Select Folder");
        // Set action for folder selection
        selectFolderButton.setOnAction(e -> {
            selectedFolder = directoryChooser.showDialog(scanStage); // Show folder dialog
            if (selectedFolder != null) {
                // If a folder is selected, print its absolute path
                System.out.println("Selected folder: " + selectedFolder.getAbsolutePath());
            }
        });

        // Button for selecting the signature file
        Button selectFileButton = new Button("Select Signature File");
        // Set action for file selection
        selectFileButton.setOnAction(e -> {
            signatureFile = fileChooser.showOpenDialog(scanStage); // Show file dialog
            if (signatureFile != null) {
                // If a file is selected, print its absolute path
                System.out.println("Selected signature file: " + signatureFile.getAbsolutePath());
            }
        });

        // Checkbox to determine if subfolders should be included in the scan
        CheckBox subfolderCheckbox = new CheckBox("Include Subfolders");
        // Set action for checkbox state change
        subfolderCheckbox.setOnAction(e -> includeSubfolders = subfolderCheckbox.isSelected()); // Update includeSubfolders based on checkbox state

        // Create a ProgressBar to show scanning progress
        progressBar = new ProgressBar(0); // Initial progress value is 0

        // Button to start the scanning process
        Button startScanButton = new Button("Start Scanning");
        // Set action for starting the scan
        startScanButton.setOnAction(e -> {
            // Check if both folder and signature file are selected
            if (selectedFolder != null && signatureFile != null) {
                // Start the scanning process with the selected parameters
                startScan(selectedFolder, signatureFile, includeSubfolders);
            } else {
                // Show an alert if either selection is missing
                showAlert("Error", "Please select both a folder and a signature file.");
            }
        });

        // Create a VBox layout for organizing the UI components
        VBox vbox = new VBox(10); // 10px spacing between elements
        // Apply padding to the VBox
        vbox.setPadding(new Insets(20, 20, 20, 20)); // Padding: top, right, bottom, left

        // Set margins for individual buttons to space them vertically
        VBox.setMargin(selectFolderButton, new Insets(10, 0, 0, 0)); // Margin at the top of the button
        VBox.setMargin(selectFileButton, new Insets(10, 0, 0, 0)); // Margin for file selection button
        VBox.setMargin(subfolderCheckbox, new Insets(10, 0, 0, 0)); // Margin for checkbox
        VBox.setMargin(progressBar, new Insets(20, 0, 0, 0)); // Margin for progress bar
        VBox.setMargin(startScanButton, new Insets(20, 0, 0, 0)); // Margin for scan button

        // Add all components to the VBox
        vbox.getChildren().addAll(selectFolderButton, selectFileButton, subfolderCheckbox, progressBar, startScanButton);

        // Create a Scene with the VBox layout and set its dimensions
        Scene scene = new Scene(vbox, 400, 300);
        // Set the title of the scan stage
        scanStage.setTitle("Scan for Malware");
        // Set the scene for the scan stage
        scanStage.setScene(scene);
        // Show the scan stage
        scanStage.show();
    }

    private void startScan(File folder, File signatureFile, boolean includeSubfolders) {
        // Create a new Task to perform the scanning operation in a background thread
        Task<HashSet<DetectedMalware>> scanTask = new Task<HashSet<DetectedMalware>>() {
            @Override
            protected HashSet<DetectedMalware> call() throws Exception {
                // Create a Scanner instance using the provided signature file path
                Scanner scanner = new Scanner(signatureFile.getAbsolutePath());
                // Scan the specified folder for malware, including or excluding subfolders based on user selection
                HashSet<DetectedMalware> results = scanner.scan(folder.getAbsolutePath(), includeSubfolders);
                // Get the total number of detected malware instances
                int totalFiles = results.size();
                int count = 0; // Initialize a count for progress tracking

                // Iterate through the detected malware results
                for (DetectedMalware malware : results) {
                    count++; // Increment the count for each detected malware
                    updateProgress(count, totalFiles); // Update the progress bar with the current count
                    Thread.sleep(50); // Simulate a delay for scanning to make progress visible
                }
                // Return the set of detected malware instances
                return results;
            }
        };

        // Bind the progress property of the progress bar to the task's progress property
        progressBar.progressProperty().bind(scanTask.progressProperty());

        // Set an action to be performed when the task is completed successfully
        scanTask.setOnSucceeded(e -> showResultsWindow(scanTask.getValue()));

        // Start the task in a new thread to keep the UI responsive during scanning
        new Thread(scanTask).start();
    }

    private void showResultsWindow(HashSet<DetectedMalware> results) {
        Stage resultStage = new Stage();
        VBox vbox = new VBox(10);  // This VBox will hold the ListView and the HBox of buttons

        // Create the ListView for showing the results
        ListView<String> resultListView = new ListView<>();
        for (DetectedMalware malware : results) {
            resultListView.getItems().add(malware.toString());
        }

        // Create the buttons
        Button saveButton = new Button("Save Results");
        saveButton.setOnAction(e -> saveResults(results));

        Button deleteButton = new Button("Delete Files");
        deleteButton.setOnAction(e -> deleteMalwareFiles(results));

        Button closeButton = new Button("Close");
        closeButton.setOnAction(e -> resultStage.close());

        // Use HBox to place the buttons in a row
        HBox hbox = new HBox(10);  // HBox with 10px spacing between buttons
        hbox.getChildren().addAll(saveButton, deleteButton, closeButton);

        // Add the ListView and HBox to the VBox
        vbox.getChildren().addAll(resultListView, hbox);

        Scene scene = new Scene(vbox, 400, 400);
        resultStage.setTitle("Scan Results");
        resultStage.setScene(scene);
        resultStage.show();
    }

    private void saveResults(HashSet<DetectedMalware> results) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save Scan Results");
        // Set the default file extension filter
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Serialized Files", "*.ser"));

        // Let the user choose the file location to save the results
        File file = fileChooser.showSaveDialog(null);
        if (file != null) {
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {
                // Serialize the Set of DetectedMalware
                oos.writeObject(results);
                System.out.println("Results saved to: " + file.getAbsolutePath());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void deleteMalwareFiles(HashSet<DetectedMalware> results) {
        // Iterate through each detected malware instance in the results set
        for (DetectedMalware malware : results) {
            // Create a File object using the file path associated with the detected malware
            File file = new File(malware.getFilePath());

            // Attempt to delete the file and check if the deletion was successful
            if (file.delete()) {
                // If deletion is successful, print a confirmation message
                System.out.println("Deleted: " + malware.getFileName());
            } else {
                // If deletion fails, print an error message indicating failure
                System.out.println("Failed to delete: " + malware.getFileName());
            }
        }
    }

    private void showAlert(String title, String message) {
        // Create a new alert of type ERROR to indicate that something went wrong
        Alert alert = new Alert(Alert.AlertType.ERROR);

        // Set the title of the alert dialog to the provided title parameter
        alert.setTitle(title);

        // Set the content text of the alert dialog to the provided message parameter
        alert.setContentText(message);

        // Display the alert and wait for the user to respond before continuing
        alert.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
